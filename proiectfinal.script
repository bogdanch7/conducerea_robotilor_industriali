def testproiectfinal2():
  set_gravity([0.0, 0.0, 9.82])
  set_tcp(p[0.0,0.0,0.27041000000000004,0.0,0.0,0.0])
  set_payload(0.9, [0.0, 0.0, 0.17])
  set_tool_voltage(24)
  set_safety_mode_transition_hardness(1)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  step_count_fb6b861c_f2c5_4874_9f14_81518c1b5750 = 0.0
  thread Step_Counter_Thread_bb0c798b_beea_4fa0_aa18_d32b77285c2c():
    while (True):
      step_count_fb6b861c_f2c5_4874_9f14_81518c1b5750 = step_count_fb6b861c_f2c5_4874_9f14_81518c1b5750 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_bb0c798b_beea_4fa0_aa18_d32b77285c2c()
  global poz_switch=3
  global x=0.03
  global Dist_cub=80
  global countt=2
  global lp=5
  global switchState=[0, 0, 0, 0, 0, 0]
  global i_var_1=6
  global pozt=p[-0.58, 0.2, 0.03, 1.08, 2.43, 0.92]
  global Cub=p[-0.5333733899169065,0.2215163955594962,0.16621704113782268,0.29676891717628096,-0.762003058255801,0.6932450754498153]
  global Masa=p[-0.5646864889252723,-0.09295846005778519,-0.011586725889142446,-0.002204506099067434,-1.5199745422116683E-4,-0.8484235711542728]
  global Perete=p[0.07880424455785079,-0.9029855161661187,0.02758526437122058,1.5020481596863833,0.5702478707698211,0.5632393139112222]
  global Tastatura=p[-0.09231590579655835,-0.6678088319801073,0.016651929464737425,-0.0773961656510178,-0.1581031184557651,-0.8431723080959733]
  global plan_masa=p[-0.5631648595800378,-0.0915378818255476,-0.042707498643383746,-0.004205331887450723,8.438780583721072E-4,-0.8451230678381721]
  # begin: URCap Installation Node
  #   Source: OnRobot, 5.10.1, OnRobot A/S
  #   Type: OnRobot Setup
  if (False):
    global rg_Busy = 0
    global rg_Depth = 0
    global rg_DepthRel = 0
    global rg_Grip_detected = 0
    global rg_Width = 0
  end
  ON_BASE_SHIFT_BOOL = 64
  ON_BASE_SHIFT_INT = 24
  ON_BASE_SHIFT_FLOAT = 24
  ON_DEVICE_SHIFT_BOOL_ARR = [64, 71, 71]
  ON_DEVICE_SHIFT_INT_ARR = [25, 28, 28]
  ON_DEVICE_SHIFT_FLOAT_ARR = [24, 27, 27]
  ON_REGISTERS_SUM_BOOL = 7
  ON_REGISTERS_SUM_INT = 4
  ON_REGISTERS_SUM_FLOAT = 3
  ON_REGISTERS_SPEEDL_INT = 0
  ON_DI_SINGLE = 0
  ON_DI_PRIMARY = 1
  ON_DI_SECONDARY = 2
  ON_DI_DUAL = 3
  on_robot_type = 5
  on_robot_cycle = 8.0
  on_device_ip = "localhost"
  on_device_socket_port = 51234
  on_xmlrpc = rpc_factory("xmlrpc", "http://localhost:41414")
  on_RPC = rpc_factory("xmlrpc", "http://127.0.0.1:31416")
  ON_DEBUG_LOG = False
  on_isMetric = True
  on_toolConnector = True
  on_ioqc = True
  on_dual = False
  on_computebox = False
  on_devices = 1
  on_gripper = [False, False, False]
  rg_index = 0
  on_gripper[rg_index] = True
  on_ft = False
  #======    OnRobot Globals    ======#
  
  ON_MATH_PI=3.141593
  ON_ZEROPOSE=p[0.0,0.0,0.0,0.0,0.0,0.0]
  ON_ZEROFRAME=p[0.0,0.0,0.0,0.0,0.0,0.0]
  ON_ZERO3D=[0.0,0.0,0.0]
  ON_ZERO6D=[0.0,0.0,0.0,0.0,0.0,0.0]
  ON_ZERO8D=[0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
  ON_FALSE3D=[False,False,False]
  ON_FALSE6D=[False,False,False,False,False,False]
  ON_FALSE8D=[False,False,False,False,False,False,False,False]
  global on_return=0
  on_speedL=ON_ZERO6D
  on_speedBase=ON_ZERO6D
  on_speedVect=ON_ZERO6D
  on_speedExtra=ON_ZERO6D
  on_speedCB=ON_ZERO6D
  on_speedGecko=ON_ZERO6D
  on_RTDE_error=0
  on_dataProcess_thrd=0
  ON_DEVICE_ID_MISSING=0
  ON_INIT_WATCHDOG_HZ=5
  ON_INIT_TIMEOUT=500
  on_robot_TCP_offset=ON_ZEROFRAME
  on_tcp_offset_actual=ON_ZEROFRAME
  on_cog_actual=ON_ZEROFRAME
  on_mass_actual=0.0
  on_robot_mount=[0.0,0.0]
  
  #======    End of OnRobot Globals    ======#
  #======    OnRobot RG Globals    ======#
  
  RG_DEVICE_ID_RG2=32
  RG_DEVICE_ID_RG6=33
  if ON_DEBUG_LOG:
  textmsg("RG Dual: False, Index: ",rg_index)
  if False:
  rg_index=-1
  end 
  end 
  rg_Width_arr=[0,0,0]
  rg_Depth_arr=[0,0,0]
  rg_DepthRel_arr=[0,0,0]
  rg_product_code_arr=[0,0,0]
  rg_device_id_arr=[0,0,0]
  rg_Status_arr=[0,0,0]
  rg_Grip_detected_arr=[False,False,False]
  rg_Busy_arr=[False,False,False]
  rg_S1_pushed_arr=[False,False,False]
  rg_S1_triggered_arr=[False,False,False]
  rg_S2_pushed_arr=[False,False,False]
  rg_S2_triggered_arr=[False,False,False]
  rg_Safety_error_arr=[False,False,False]
  rg_Speed_arr=[0,0,0]
  rg_Angle_arr=[0,0,0]
  rg_Angle_speed_arr=[0,0,0]
  rg_Depth_prev_arr=[0,0,0]
  rg_speedDC=ON_ZERO6D
  rg_data_error_arr=[0,0,0]
  rg_mounting_angle_arr=[0,0,0]
  rg_fingertip_arr=[0,0,0]
  rg_Grip_guard_arr=[False,False,False]
  
  rg_Width=0
  rg_Depth=0
  rg_DepthRel=0
  rg_Busy=False
  rg_Grip_detected=False
  def get_rg_Width():
  return rg_Width
  end 
  def get_rg_Depth():
  return rg_Depth
  end 
  def get_rg_DepthRel():
  return rg_DepthRel
  end 
  def get_rg_Busy():
  return rg_Busy
  end 
  def get_rg_Grip_detected():
  return rg_Grip_detected
  end 
  
  rg2_mount_bracket_offset=35.0/1000.0
  rg2_mount_body_offset=p[0.0,0.0,0.180,0.0,0.0,0.0]
  rg2_mount_cog_offset=p[0.0,0.0,0.065,0.0,0.0,0.0]
  rg6_mount_bracket_offset=35.0/1000.0
  rg6_mount_body_offset=p[0.0,0.0,0.230,0.0,0.0,0.0]
  rg6_mount_cog_offset=p[0.0,0.0,0.080,0.0,0.0,0.0]
  
  #======    End of OnRobot RG Globals    ======#
  #======    OnRobot Interface Messages    ======#
  
  on_devices_primary_log="OnRobot Devices"
  on_devices_secondary_log="OnRobot Secondary Device"
  on_device_error_title="OnRobot - Device error"
  on_install_error="OnRobot Setup is not correct.<br>Check the status in the OnRobot Setup page in the Installation Tab.<br>Program halted."
  on_device_missing="No device connected.<br>Program halted."
  ft_device_missing="No OnRobot F/T sensor connected.<br>Program halted."
  cb_device_missing="No OnRobot F/T device connected.<br>Program halted."
  hex_device_missing="No HEX Sensor connected.<br>Program halted."
  rg2ft_device_missing="No RG2-FT gripper connected.<br>Program halted."
  rg_device_missing="No RG gripper connected.<br>Program halted."
  vg_device_missing="No VG gripper connected.<br>Program halted."
  gg_device_missing="No Gecko Gripper connected.<br>Program halted."
  sg_device_missing="No Soft Gripper connected.<br>Program halted."
  tfg_device_missing="No 3FG gripper connected.<br>Program halted."
  sdr_device_missing="No OnRobot Sander connected.<br>Program halted."
  twofg_device_missing="No 2FG gripper connected.<br>Program halted."
  vgp_device_missing="No VGP gripper connected.<br>Program halted."
  mg_device_missing="No Magnetic Gripper connected.<br>Program halted."
  on_xmlrpc_start_ip="Connecting to OnRobot XML-RPC Server:"
  on_java_comm_error_textmsg_title="OnRobot - Communication error:"
  on_java_comm_controlsocket_open_error="Socket 'javaSocket' opening was unsuccessful."
  on_java_comm_error_title="OnRobot - Communication error"
  on_java_comm_socket_open_error="Establishing connection with the URCap was timed out.<br>Check the status in the OnRobot Setup page in the Installation Tab.<br>Program halted."
  on_rtde_feed_error_textmsg_title="OnRobot - RTDE error:"
  on_rtde_feed_error="RTDE feed error. OnRobot device count mismatch.<br>Program halted."
  on_rtde_feed_open_error_textmsg="Socket 'rtdeFeed' opening was unsuccessful."
  on_rtde_feed_error_title="OnRobot - RTDE error"
  on_rtde_feed_count_error="Invalid RTDE offset setup detected. Please check RTDE Offsets at the OnRobot Setup page in the Installation Tab.<br>Program halted."
  on_rtde_feed_open_error="Establishing connection with the devices was timed out.<br>Ensure that the OnRobot devices are operational, and check the status in the OnRobot Setup page in the Installation Tab."
  
  #======    End of OnRobot Interface Messages    ======#
  #======    OnRobot Interface    ======#
  
  on_portopened_javaSocket=False
  on_rtde_feed_opened=False
  on_dataProcess_running=False
  def on_missing():
  popup(on_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def ft_missing():
  popup(ft_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def cb_missing():
  popup(ft_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def hex_missing():
  popup(hex_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def rg2ft_missing():
  popup(rg2ft_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def rg_missing():
  popup(rg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def vg_missing():
  popup(vg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def gg_missing():
  popup(gg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def sg_missing():
  popup(sg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def tfg_missing():
  popup(tfg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def sdr_missing():
  popup(sdr_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def twofg_missing():
  popup(twofg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def vgp_missing():
  popup(vgp_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def mg_missing():
  popup(mg_device_missing,title=on_device_error_title,error=True,blocking=False)
  halt
  end 
  def on_portclose_javaSocket():
  socket_close("javaSocket")
  on_portopened_javaSocket=False
  end 
  def on_portopen_javaSocket():
  on_portclose_javaSocket()
  on_portopened_javaSocket=socket_open("127.0.0.1",44005,"javaSocket")
  if not on_portopened_javaSocket:
  textmsg(on_java_comm_error_textmsg_title,on_java_comm_controlsocket_open_error)
  popup(on_java_comm_socket_open_error,title=on_java_comm_error_title,error=True,blocking=False)
  halt
  end 
  end 
  def on_rtde_feed_close():
  socket_close("rtdeFeed")
  on_rtde_feed_opened=False
  end 
  def on_rtde_feed_open():
  on_rtde_feed_close()
  if((ON_BASE_SHIFT_BOOL+ON_REGISTERS_SUM_BOOL)>128)or((ON_BASE_SHIFT_INT+ON_REGISTERS_SUM_INT)>48)or((ON_BASE_SHIFT_FLOAT+ON_REGISTERS_SUM_FLOAT)>48):
  popup(on_rtde_feed_count_error,title=on_rtde_feed_error_title,error=True,blocking=False)
  halt
  end 
  on_rtde_feed_opened=socket_open(on_device_ip,on_device_socket_port,"rtdeFeed")
  if not on_rtde_feed_opened:
  on_rtde_feed_opened=socket_open(on_device_ip,on_device_socket_port,"rtdeFeed")
  end 
  if not on_rtde_feed_opened:
  textmsg(on_rtde_feed_error_textmsg_title,on_rtde_feed_open_error_textmsg)
  popup(on_rtde_feed_open_error,title=on_rtde_feed_error_title,error=True,blocking=False)
  halt
  end 
  socket_send_int(ON_BASE_SHIFT_BOOL,"rtdeFeed")
  socket_send_int(ON_REGISTERS_SUM_BOOL,"rtdeFeed")
  socket_send_int(ON_BASE_SHIFT_INT,"rtdeFeed")
  socket_send_int(ON_REGISTERS_SUM_INT,"rtdeFeed")
  socket_send_int(ON_BASE_SHIFT_FLOAT,"rtdeFeed")
  socket_send_int(ON_REGISTERS_SUM_FLOAT,"rtdeFeed")
  socket_send_int(ON_REGISTERS_SPEEDL_INT,"rtdeFeed")
  end 
  def on_dataRead():
  enter_critical
  on_RTDE_error=read_input_integer_register(ON_BASE_SHIFT_INT)
  exit_critical
  end 
  def on_set_rtde_watchdog(updateHz=ON_INIT_WATCHDOG_HZ):
  if(on_devices>0):
  watchdog_int_reg_str=str_cat("input_int_register_",ON_BASE_SHIFT_INT)
  rtde_set_watchdog(watchdog_int_reg_str,updateHz,"stop")
  if ON_DEBUG_LOG:
  local update_str=str_cat(" watchdog set to [Hz]: ",updateHz)
  textmsg(watchdog_int_reg_str,update_str)
  end 
  end 
  end 
  def on_speedCB_get():
  return[on_speedCB[0],on_speedCB[1],on_speedCB[2],on_speedCB[3],on_speedCB[4],on_speedCB[5]]
  end 
  def on_speedGecko_get():
  local speedExtra=ON_ZERO6D
  if on_speedl_for_gecko:
  speedExtra=[on_speedGecko[0],on_speedGecko[1],on_speedGecko[2],on_speedGecko[3],on_speedGecko[4],on_speedGecko[5]]
  end 
  return speedExtra
  end 
  def on_speedGecko_set(speedGecko):
  on_speedGecko=[speedGecko[0],speedGecko[1],speedGecko[2],speedGecko[3],speedGecko[4],speedGecko[5]]
  end 
  thread on_dataProcess_thread():
  if ON_DEBUG_LOG:
  textmsg("Starting on_dataRead thread")
  end 
  local error=False
  on_dataProcess_running=True
  sync()
  while on_dataProcess_running:
  sync()
  on_dataRead()
  error=on_error((on_RTDE_error<0),on_rtde_feed_error,on_rtde_feed_error_title,False)
  on_dataProcess_running=not error
  end 
  if error:
  halt
  end 
  if ON_DEBUG_LOG:
  textmsg("Stopping on_dataRead thread")
  end 
  end 
  thread on_set_watchdog_thread():
  sleep(1)
  on_set_rtde_watchdog(updateHz=ON_INIT_WATCHDOG_HZ)
  sleep(1/ON_INIT_WATCHDOG_HZ)
  on_dataProcess_running=False
  kill on_dataProcess_thrd
  end 
  
  #======    End of OnRobot Interface    ======#
  #======    OnRobot QC Setup Tool Connector    ======#
  
  def tc_setup_tool():
  if ON_DEBUG_LOG:
  textmsg("QC Setup Tool Connector start...")
  end 
  set_tool_voltage(24)
  
  if ON_DEBUG_LOG:
  textmsg("QC Setup Tool Connector end.")
  end 
  end 
  
  #======    End of OnRobot QC Setup Tool Connector    ======#
  #======    OnRobot RG Interface    ======#
  
  rg_dataRead_running=False
  def rg_dataRead_RTDE(tool_index):
  local reg_offset_bool=ON_DEVICE_SHIFT_BOOL_ARR[tool_index]
  local reg_offset_int=ON_DEVICE_SHIFT_INT_ARR[tool_index]
  local reg_offset_float=ON_DEVICE_SHIFT_FLOAT_ARR[tool_index]
  enter_critical
  floatRegDummy=read_input_float_register(reg_offset_float+0)
  rg_Width_arr[tool_index]=floatRegDummy
  floatRegDummy=read_input_float_register(reg_offset_float+1)
  rg_Depth_arr[tool_index]=floatRegDummy
  floatRegDummy=read_input_float_register(reg_offset_float+2)
  rg_DepthRel_arr[tool_index]=floatRegDummy
  intRegDummy=read_input_integer_register(reg_offset_int+0)
  rg_device_id_arr[tool_index]=intRegDummy
  intRegDummy=read_input_integer_register(reg_offset_int+1)
  rg_product_code_arr[tool_index]=intRegDummy
  intRegDummy=read_input_integer_register(reg_offset_int+2)
  rg_Status_arr[tool_index]=intRegDummy
  boolRegDummy=read_input_boolean_register(reg_offset_bool+0)
  rg_Busy_arr[tool_index]=boolRegDummy
  boolRegDummy=read_input_boolean_register(reg_offset_bool+1)
  rg_Grip_detected_arr[tool_index]=boolRegDummy
  boolRegDummy=read_input_boolean_register(reg_offset_bool+2)
  rg_S1_pushed_arr[tool_index]=boolRegDummy
  boolRegDummy=read_input_boolean_register(reg_offset_bool+3)
  rg_S1_triggered_arr[tool_index]=boolRegDummy
  boolRegDummy=read_input_boolean_register(reg_offset_bool+4)
  rg_S2_pushed_arr[tool_index]=boolRegDummy
  boolRegDummy=read_input_boolean_register(reg_offset_bool+5)
  rg_S2_triggered_arr[tool_index]=boolRegDummy
  boolRegDummy=read_input_boolean_register(reg_offset_bool+6)
  rg_Safety_error_arr[tool_index]=boolRegDummy
  exit_critical
  end 
  thread rg_dataRead_thread():
  if ON_DEBUG_LOG:
  textmsg("Starting rg_dataRead thread")
  end 
  while rg_dataRead_running:
  sync()
  rg_Depth_prev_arr=rg_Depth_arr
  if(rg_index==ON_DI_DUAL):
  rg_dataRead_RTDE(ON_DI_PRIMARY)
  rg_dataRead_RTDE(ON_DI_SECONDARY)
  else:
  rg_dataRead_RTDE(rg_index)
  end 
  end 
  if ON_DEBUG_LOG:
  textmsg("Stopping rg_dataRead thread")
  end 
  end 
  
  #======    End of OnRobot RG Interface    ======#
  #======    OnRobot TCP Messages    ======#
  
  on_tcp_log_msg_default="OnRobot: Robot TCP Offset set to:"
  on_tcp_log_msg_primary="OnRobot: Robot TCP Offset set to Primary:"
  on_tcp_log_msg_secondary="OnRobot: Robot TCP Offset set to Secondary:"
  
  #======    End of OnRobot TCP Messages    ======#
  #======    OnRobot TCP    ======#
  
  on_tcp_offset_actual=ON_ZEROFRAME
  on_tcp_offset_primary=ON_ZEROFRAME
  on_tcp_static_primary=ON_ZEROFRAME
  on_tcp_dynamic_primary=ON_ZEROFRAME
  on_tcp_vision_primary=ON_ZEROFRAME
  on_tcp_qc_primary=ON_ZEROFRAME
  on_tcp_base_primary=ON_ZEROFRAME
  on_tcp_gripper_static_primary=ON_ZEROFRAME
  on_tcp_tool_primary=ON_ZEROFRAME
  on_tcp_gripper_dynamic_primary=ON_ZEROFRAME
  on_tcp_gripper_primary=ON_ZEROFRAME
  on_tcp_offset_secondary=ON_ZEROFRAME
  on_tcp_static_secondary=ON_ZEROFRAME
  on_tcp_dynamic_secondary=ON_ZEROFRAME
  on_tcp_vision_secondary=ON_ZEROFRAME
  on_tcp_qc_secondary=ON_ZEROFRAME
  on_tcp_base_secondary=ON_ZEROFRAME
  on_tcp_gripper_static_secondary=ON_ZEROFRAME
  on_tcp_tool_secondary=ON_ZEROFRAME
  on_tcp_gripper_dynamic_secondary=ON_ZEROFRAME
  on_tcp_gripper_secondary=ON_ZEROFRAME
  def on_tcp_update_primary():
  if ON_DEBUG_LOG:
  textmsg("TCP Update Primary start..")
  end 
  on_tcp_gripper_dynamic_primary=p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  enter_critical
  on_tcp_dynamic_primary=pose_trans(on_tcp_static_primary,on_tcp_gripper_dynamic_primary)
  on_tcp_offset_primary=pose_trans(on_tcp_dynamic_primary,on_tcp_tool_primary)
  exit_critical
  if ON_DEBUG_LOG:
  textmsg("TCP Update Primary end.")
  end 
  end 
  def on_tcp_init_primary():
  if ON_DEBUG_LOG:
  textmsg("TCP Init Primary start..")
  end 
  enter_critical
  on_tcp_base_primary=pose_trans(on_tcp_vision_primary,on_tcp_qc_primary)
  on_tcp_static_primary=pose_trans(on_tcp_base_primary,on_tcp_gripper_static_primary)
  exit_critical
  on_tcp_update_primary()
  if ON_DEBUG_LOG:
  textmsg("TCP Init Primary end.")
  end 
  end 
  def on_tcp_offset_set(TCP_offset):
  if ON_DEBUG_LOG:
  textmsg("TCP Offset set started!")
  end 
  on_tcp_offset_send(TCP_offset)
  if(on_follow_tcp):
  set_tcp(TCP_offset)
  end 
  on_robot_TCP_offset=TCP_offset
  if ON_DEBUG_LOG:
  textmsg("TCP Offset set to: ",on_robot_TCP_offset)
  end 
  end 
  def on_tcp_offset_forced_set_actual(isPrimary=True):
  if(not on_follow_tcp):
  
  local tcp_log_msg=on_tcp_log_msg_default
  
  textmsg(tcp_log_msg,on_tcp_offset_actual)
  set_tcp(on_tcp_offset_actual)
  end 
  end 
  def on_tcp_update(isPrimary=True):
  on_tcp_update_primary()
  
  on_tcp_set_actual_to(isPrimary)
  end 
  def on_tcp_set_actual_to(isPrimary=True):
  
  on_tcp_offset_actual=on_tcp_offset_primary
  if(on_follow_tcp):
  textmsg(on_tcp_log_msg_default,on_tcp_offset_actual)
  end 
  
  on_tcp_active_is_primary=isPrimary
  on_tcp_offset_set(on_tcp_offset_actual)
  end 
  def on_tcp_update_tool_primary(tool_offset):
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool Primary start..")
  end 
  on_tcp_tool_primary=tool_offset
  on_tcp_update_primary()
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool Primary end.")
  end 
  end 
  def on_tcp_tool_rpy_get(xyz=[0.0,0.0,0.0],rpy=[0.0,0.0,0.0]):
  local rotvec=rpy2rotvec(rpy)
  local tool_offset=p[xyz[0],xyz[1],xyz[2],rotvec[0],rotvec[1],rotvec[2]]
  return tool_offset
  end 
  
  def on_tcp_update_tool(tool_offset,tool_index=0):
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool start..")
  end 
  if(tool_index!=ON_DI_SECONDARY):
  on_tcp_update_tool_primary(tool_offset)
  local isPrimary=True
  
  end 
  on_tcp_set_actual_to(isPrimary)
  if ON_DEBUG_LOG:
  textmsg("TCP Update Tool end.")
  end 
  end 
  def on_get_tcp_for(tool_index):
  if tool_index==ON_DI_SECONDARY:
  local actual_tcp=on_tcp_static_secondary
  else:
  local actual_tcp=on_tcp_static_primary
  end 
  return actual_tcp
  end 
  
  #======    End of OnRobot TCP    ======#
  #======    OnRobot Payload Messages    ======#
  
  on_mass_log_msg="OnRobot: Robot Payload Mass set to:"
  on_cog_log_msg="OnRobot: Robot Payload Center of Gravity set to:"
  
  #======    End of OnRobot Payload Messages    ======#
  #======    OnRobot Payload    ======#
  
  on_cog_actual=ON_ZEROFRAME
  on_mass_actual=0.0
  on_cog_primary=ON_ZEROFRAME
  on_cog_L1L2_primary=ON_ZEROFRAME
  on_mass_primary=0.0
  on_mass_L1L2_primary=0.0
  on_cog_vision_primary=ON_ZEROFRAME
  on_cog_qc_primary=ON_ZEROFRAME
  on_cog_base_primary=ON_ZEROFRAME
  on_cog_gripper_primary=ON_ZEROFRAME
  on_cog_tool_primary=ON_ZEROFRAME
  on_mass_vision_primary=0.0
  on_mass_qc_primary=0.0
  on_mass_base_primary=0.0
  on_mass_gripper_primary=0.0
  on_mass_tool_primary=0.0
  on_cog_secondary=ON_ZEROFRAME
  on_mass_secondary=0.0
  on_cog_gripper_secondary=ON_ZEROFRAME
  on_mass_gripper_secondary=0.0
  on_cog_tool_secondary=ON_ZEROFRAME
  on_mass_tool_secondary=0.0
  ON_LB2KG001=0.45359237/100
  def on_payload_update_primary():
  if ON_DEBUG_LOG:
  textmsg("Payload Update Primary start..")
  end 
  enter_critical
  on_mass_primary=on_mass_L1L2_primary+on_mass_tool_primary
  local massL1L2L3Ratio=on_mass_tool_primary/on_mass_primary
  local toolAbsCOG=pose_trans(on_tcp_dynamic_primary,on_cog_tool_primary)
  toolAbsCOG=p[toolAbsCOG[0],toolAbsCOG[1],toolAbsCOG[2],0.0,0.0,0.0]
  on_cog_primary=interpolate_pose(on_cog_L1L2_primary,toolAbsCOG,massL1L2L3Ratio)
  on_cog_primary=p[on_cog_primary[0],on_cog_primary[1],on_cog_primary[2],0.0,0.0,0.0]
  exit_critical
  if ON_DEBUG_LOG:
  textmsg("Payload Update Primary end.")
  end 
  end 
  def on_payload_init_primary():
  if ON_DEBUG_LOG:
  textmsg("Payload Init Primary start..")
  end 
  enter_critical
  on_mass_base_primary=on_mass_vision_primary+on_mass_qc_primary
  local massL0L1Ratio=on_mass_qc_primary/on_mass_base_primary
  on_mass_L1L2_primary=on_mass_base_primary+on_mass_gripper_primary
  local massL1L2Ratio=on_mass_gripper_primary/on_mass_L1L2_primary
  local qcAbsCOG=pose_trans(on_tcp_vision_primary,on_cog_qc_primary)
  qcAbsCOG=p[qcAbsCOG[0],qcAbsCOG[1],qcAbsCOG[2],0.0,0.0,0.0]
  on_cog_base_primary=interpolate_pose(on_cog_vision_primary,qcAbsCOG,massL0L1Ratio)
  on_cog_base_primary=p[on_cog_base_primary[0],on_cog_base_primary[1],on_cog_base_primary[2],0.0,0.0,0.0]
  local gripperAbsCOG=pose_trans(on_tcp_base_primary,on_cog_gripper_primary)
  gripperAbsCOG=p[gripperAbsCOG[0],gripperAbsCOG[1],gripperAbsCOG[2],0.0,0.0,0.0]
  on_cog_L1L2_primary=interpolate_pose(on_cog_base_primary,gripperAbsCOG,massL1L2Ratio)
  on_cog_L1L2_primary=p[on_cog_L1L2_primary[0],on_cog_L1L2_primary[1],on_cog_L1L2_primary[2],0.0,0.0,0.0]
  exit_critical
  on_payload_update_primary()
  if ON_DEBUG_LOG:
  textmsg("Payload Init Primary end.")
  end 
  end 
  def on_payload_update():
  on_payload_update_primary()
  
  on_mass_actual =on_mass_primary
  on_cog_actual=on_cog_primary
  
  on_payload_set_actual()
  end 
  def on_payload_set_actual():
  
  on_mass_actual =on_mass_primary
  on_cog_actual=on_cog_primary
  
  local CoG=[on_cog_actual[0],on_cog_actual[1],on_cog_actual[2]]
  on_payload_set(on_mass_actual,CoG)
  end 
  def on_payload_update_tool_primary(tool_mass=0,tool_cog=[0.0,0.0,0.0]):
  if ON_DEBUG_LOG:
  textmsg("Payload Update Tool Primary start..")
  end 
  on_cog_tool_primary=p[tool_cog[0],tool_cog[1],tool_cog[2],0.0,0.0,0.0]
  on_mass_tool_primary=tool_mass
  on_payload_update_primary()
  if ON_DEBUG_LOG:
  textmsg("Payload Update Tool Primary end.")
  end 
  end 
  def on_payload_set(mass,CoG):
  if ON_DEBUG_LOG:
  textmsg("Payload set started!")
  end 
  local center_of_gravity=[CoG[0],CoG[1],CoG[2]]
  on_payload_send(center_of_gravity,mass)
  if(on_isMetric):
  local roundedMass=floor(mass*100+0.5)/100
  else:
  local roundedMass=floor(mass/ON_LB2KG001+0.5)*ON_LB2KG001
  end 
  set_payload(roundedMass,center_of_gravity)
  on_mass_actual=roundedMass
  on_cog_actual=p[CoG[0],CoG[1],CoG[2],0.0,0.0,0.0]
  if ON_DEBUG_LOG:
  textmsg("Payload mass, CoG set to: ",str_cat(str_cat(mass,", "),CoG))
  end 
  end 
  
  def on_payload_update_secondary():
  end 
  def on_payload_init_secondary():
  end 
  
  def on_payload_update_tool(tool_mass,tool_cog=[0.0,0.0,0.0],tool_index=0):
  if ON_DEBUG_LOG:
  textmsg("Payload Update Tool start..")
  end 
  if(tool_index!=ON_DI_SECONDARY):
  on_cog_tool_primary=p[tool_cog[0],tool_cog[1],tool_cog[2],0.0,0.0,0.0]
  on_mass_tool_primary=tool_mass
  else:
  on_cog_tool_secondary=p[tool_cog[0],tool_cog[1],tool_cog[2],0.0,0.0,0.0]
  on_mass_tool_secondary=tool_mass
  end 
  on_payload_update()
  if ON_DEBUG_LOG:
  textmsg("Payload Update Tool end.")
  end 
  end 
  def on_payload_get_cog2tcp_tool(tool_index=0):
  if(tool_index!=ON_DI_SECONDARY):
  local cog_tool=[on_tcp_tool_primary[0],on_tcp_tool_primary[1],on_tcp_tool_primary[2]]
  else:
  local cog_tool=[on_tcp_tool_secondary[0],on_tcp_tool_secondary[1],on_tcp_tool_secondary[2]]
  end 
  return cog_tool
  end 
  
  #======    End of OnRobot Payload    ======#
  #======    OnRobot QC TCP    ======#
  
  onrobotmini=0
  
  def on_tcp_offset_send(TCP_offset):
  on_robot_TCP_offset=TCP_offset
  end 
  def on_payload_send(CoG,mass):
  on_robot_payload_cog=CoG
  on_robot_payload_mass=mass
  end 
  
  
  #======    End of OnRobot QC TCP    ======#
  #======    OnRobot RG TCP    ======#
  
  def rg_mount_tcp(gripper_angle,isRG2=True):
  if ON_DEBUG_LOG:
  textmsg("RG Mount TCP command starting..")
  end 
  if(isRG2):
  local gripperBracket=rg2_mount_bracket_offset
  local gripperBody=rg2_mount_body_offset
  else:
  local gripperBracket=rg6_mount_bracket_offset
  local gripperBody=rg6_mount_body_offset
  end 
  local gripperRotVec=rpy2rotvec([gripper_angle,0.0,0.0])
  local gripperMountOffset=p[0.0,0.0,gripperBracket,gripperRotVec[0],gripperRotVec[1],gripperRotVec[2]]
  local gripperOffsetStatic=pose_trans(gripperMountOffset,gripperBody)
  if ON_DEBUG_LOG:
  textmsg("RG Mount TCP command ended.")
  end 
  return gripperOffsetStatic
  end 
  def rg_mount_cog(gripper_angle,isRG2=True):
  if ON_DEBUG_LOG:
  textmsg("RG Mount CoG command starting..")
  end 
  if(isRG2):
  local gripperBracket=rg2_mount_bracket_offset
  local gripperCoG=rg2_mount_cog_offset
  else:
  local gripperBracket=rg6_mount_bracket_offset
  local gripperCoG=rg6_mount_cog_offset
  end 
  local gripperRotVec=rpy2rotvec([gripper_angle,0.0,0.0])
  local gripperMountOffset=p[0.0,0.0,gripperBracket,gripperRotVec[0],gripperRotVec[1],gripperRotVec[2]]
  local gripperCOGOffset=pose_trans(gripperMountOffset,gripperCoG)
  gripperCOGOffset=p[gripperCOGOffset[0],gripperCOGOffset[1],gripperCOGOffset[2],0.0,0.0,0.0]
  if ON_DEBUG_LOG:
  textmsg("RG Mount CoG command ended.")
  end 
  return gripperCOGOffset
  end 
  def rg_fcp_depth_calc_frame(tool_index=0):
  local gripperDepth=rg_Depth_arr[tool_index]
  local z_offset=-gripperDepth/1000.0
  return p[0.0,0.0,z_offset,0.0,0.0,0.0]
  end 
  def rg_tcp_dynamic_get(tool_index=0):
  local offset=rg_fcp_depth_calc_frame(tool_index)
  return offset
  end 
  def rg_payload_set(mass,tool_index=0,use_guard=False):
  if ON_DEBUG_LOG:
  textmsg("RG Payload mass command starting..")
  end 
  if(tool_index==ON_DI_SECONDARY):
  local cogTool=[on_cog_tool_secondary[0],on_cog_tool_secondary[1],on_cog_tool_secondary[2]]
  else:
  local cogTool=[on_cog_tool_primary[0],on_cog_tool_primary[1],on_cog_tool_primary[2]]
  end 
  if(use_guard and rg_Grip_detected_arr[tool_index]):
  local mass2set=mass
  rg_Grip_guard_arr[tool_index]=not on_ioqc
  else:
  local mass2set=0.0
  rg_Grip_guard_arr[tool_index]=False
  end 
  on_payload_update_tool(mass2set,cogTool,tool_index)
  if ON_DEBUG_LOG:
  textmsg("RG Payload mass command ended.")
  end 
  end 
  
  #======    End of OnRobot RG TCP    ======#
  #======    OnRobot  Speedl    ======#
  
  on_speedl_thread_handler=0
  on_speedl_is_enabled=False
  on_speedl_is_running=False
  on_speedl_acc=0.0
  ft_speedl_hg_caranteen_reached=False
  ft_speedl_hg_caranteen_safemode=False
  on_speedl_for_ftcontrol=False
  on_speedl_for_move=False
  on_speedl_for_handguide=False
  on_speedl_for_insertpart=False
  on_speedl_for_depthcompensation=False
  on_speedl_for_center=False
  on_speedl_for_gecko=False
  on_speedl_acc=10000.0 
  on_speedl_acc_to_zero=3.0 
  ON_SPEEDL_FTCONTROL=1
  ON_SPEEDL_HANDGUIDE=2
  ON_SPEEDL_TRAJECTORY=3
  ON_SPEEDL_MOVE=ON_SPEEDL_TRAJECTORY
  ON_SPEEDL_INSERTPART=4
  ON_SPEEDL_DEPTHCOMP=5
  ON_SPEEDL_CENTER=6
  ON_SPEEDL_GECKO=7
  def on_wait_ms(time_ms):
  local sync_time=ceil(norm(time_ms/8.0))
  while(sync_time>0):
  sync_time=sync_time-1
  sync()
  end
  end 
  def on_error(status_flag,message,title,stop_var=False):
  if(status_flag):
  popup(message,title=title,error=True,blocking=False)
  stop_var=True
  end 
  return stop_var
  end 
  def on_warning(status_flag,message,title,isPopupNeeded=False,is_shown=False):
  if(status_flag):
  if(not is_shown):
  if(isPopupNeeded):
  popup(message,title=title,warning=True,blocking=False)
  else:
  textmsg(title+": ",message)
  end 
  is_shown=True
  end 
  else:
  is_shown=False
  end 
  return is_shown
  end 
  def on_speedl_add_extra(speedBase,speedExtra):
  speedSum=ON_ZERO6D
  speedBaseP=p[speedBase[0],speedBase[1],speedBase[2],speedBase[3],speedBase[4],speedBase[5]]
  speedExtraP=p[speedExtra[0],speedExtra[1],speedExtra[2],speedExtra[3],speedExtra[4],speedExtra[5]]
  speedSumP=pose_add(speedExtraP,speedBaseP)
  speedSum=[speedSumP[0],speedSumP[1],speedSumP[2],speedSumP[3],speedSumP[4],speedSumP[5]]
  return speedSum
  end 
  
  thread on_speedl_thread():
  if ON_DEBUG_LOG:
  textmsg("Speedl thread started..")
  end 
  enter_critical
  on_speedl_is_running=True
  on_speedl_is_enabled=True
  exit_critical
  on_speedL=ON_ZERO6D
  on_speedL_last=ON_ZERO6D
  
  while on_speedl_is_running:
  on_speedBase=on_speedCB_get()
  on_speedL=on_speedBase
  
  
  if on_speedl_is_enabled:
  if(on_speedL==ON_ZERO6D):
  on_speedL=[on_speedL_last[0]/100,on_speedL_last[1]/100,on_speedL_last[2]/100,on_speedL_last[3]/100,on_speedL_last[4]/100,on_speedL_last[5]/100]
  end
  speedl(on_speedL,a=on_speedl_acc,t=0.001)
  else:
  speedl(ON_ZERO6D,a=on_speedl_acc_to_zero,t=0.001)
  end 
  on_speedL_last=on_speedL
  end 
  
  on_speedL=ON_ZERO6D
  if ON_DEBUG_LOG:
  textmsg("Speedl thread ended.")
  end 
  end 
  def on_speedl_integer_get():
  local speedl_integer=binary_list_to_integer([on_speedl_for_ftcontrol,on_speedl_for_handguide,on_speedl_for_move,on_speedl_for_insertpart,on_speedl_for_depthcompensation,on_speedl_for_center,on_speedl_for_gecko])
  return speedl_integer
  end 
  def on_speedl_start_for(speedl_id):
  if(speedl_id==ON_SPEEDL_FTCONTROL):
  on_speedl_for_ftcontrol=True
  elif(speedl_id==ON_SPEEDL_HANDGUIDE):
  on_speedl_for_handguide=True
  elif(speedl_id==ON_SPEEDL_TRAJECTORY):
  on_speedl_for_move=True
  elif(speedl_id==ON_SPEEDL_INSERTPART):
  on_speedl_for_insertpart=True
  elif(speedl_id==ON_SPEEDL_DEPTHCOMP):
  on_speedl_for_depthcompensation=True
  elif(speedl_id==ON_SPEEDL_CENTER):
  on_speedl_for_center=True
  elif(speedl_id==ON_SPEEDL_GECKO):
  on_speedl_for_gecko=True
  else:
  textmsg("Unknown Start speedl ID received: ",speedl_id)
  end 
  local speedl_integer=on_speedl_integer_get()
  if not(speedl_integer==0):
  if not on_speedl_is_running:
  on_speedl_thread_handler=run on_speedl_thread()
  end 
  end 
  return on_speedl_is_running
  end 
  def on_speedl_stop_for(speedl_id,brake=10,brakeRot=10):
  if(speedl_id==ON_SPEEDL_FTCONTROL):
  on_speedl_for_ftcontrol=False
  elif(speedl_id==ON_SPEEDL_HANDGUIDE):
  on_speedl_for_handguide=False
  elif(speedl_id==ON_SPEEDL_TRAJECTORY):
  on_speedl_for_move=False
  elif(speedl_id==ON_SPEEDL_INSERTPART):
  on_speedl_for_insertpart=False
  elif(speedl_id==ON_SPEEDL_DEPTHCOMP):
  on_speedl_for_depthcompensation=False
  elif(speedl_id==ON_SPEEDL_CENTER):
  on_speedl_for_center=False
  elif(speedl_id==ON_SPEEDL_GECKO):
  on_speedl_for_gecko=False
  on_speedGecko_set(ON_ZERO6D)
  else:
  textmsg("Unknown Stop speedl ID received: ",speedl_id)
  end 
  local speedl_integer=on_speedl_integer_get()
  if(speedl_integer==0):
  if(on_speedl_is_running):
  kill on_speedl_thread_handler
  enter_critical
  on_speedl_is_running=False
  exit_critical
  
  end 
  if ON_DEBUG_LOG:
  textmsg("Speedl thread stopped")
  end 
  stopl(brake,brakeRot)
  end 
  return on_speedl_is_running
  end 
  def on_speedl_pause():
  on_speedl_is_enabled=False
  return on_speedl_integer_get()
  end 
  def on_speedl_resume():
  on_speedl_is_enabled=True
  return on_speedl_integer_get()
  end 
  
  #======    End of OnRobot  Speedl    ======#
  #======    OnRobot RG Engine Messages    ======#
  
  rg_error_title="OnRobot - RG error"
  rg_device_id_waiting="Waiting for valid OnRobot RG ID..."
  rg_device_id_timeout="Waiting for valid OnRobot RG ID timed out.<br>Program halted."
  rg_data_error_title="OnRobot - RG Data error"
  rg_data_error_type="No or unknown Gripper connected."
  rg_data_warning_title="OnRobot - RG Data warning:"
  rg_status_error_title="OnRobot - RG Status error"
  rg_status_error_missing="Communication problem with an RG gripper. Please check the device.<br>Program halted."
  rg_else_error="Unknown error code:"
  rg_status_msg_single="RG status:"
  rg_data_error_bit0_single="Wrong size of float data received."
  rg_data_error_bit1_single="Wrong size of integer data received."
  rg_data_error_bit2_single="Wrong size of boolean data received."
  rg_status_error_mismatch_single="The RG's Status is not matching with its Safety Switches' state."
  rg_status_error_s1_triggered_single="The S1 Safety Switch has been triggered.<br>Please restart the RG gripper."
  rg_status_error_s1_pushed_single="The S1 Safety Switch has been pushed."
  rg_status_error_s2_triggered_single="The S2 Safety Switch has been triggered.<br>Please restart the RG gripper."
  rg_status_error_s2_pushed_single="The S2 Safety Switch has been pushed."
  rg_status_error_safety_system_single="Safety System error occured.<br>Please restart the RG gripper."
  rg_status_msg_primary="RG Primary status:"
  rg_data_error_bit0_primary="Wrong size of float data received for Primary RG."
  rg_data_error_bit1_primary="Wrong size of integer data received for Primary RG."
  rg_data_error_bit2_primary="Wrong size of boolean data received for Primary RG."
  rg_status_error_mismatch_primary="The Primary RG's Status is not matching with its Safety Switches' state."
  rg_status_error_s1_pushed_primary="The S1 Safety Switch has been pushed on Primary RG."
  rg_status_error_s1_triggered_primary="The S1 Safety Switch has been triggered on Primary RG.<br>Please restart the Primary RG gripper."
  rg_status_error_s2_pushed_primary="The S2 Safety Switch has been pushed on Primary RG."
  rg_status_error_s2_triggered_primary="The S2 Safety Switch has been triggered on Primary RG.<br>Please restart the Primary RG gripper."
  rg_status_error_safety_system_primary="Safety System error occured.<br>Please restart the Primary RG gripper."
  rg_status_msg_secondary="RG Secondary status:"
  rg_data_error_bit0_secondary="Wrong size of float data received for Secondary RG."
  rg_data_error_bit1_secondary="Wrong size of integer data received for Secondary RG."
  rg_data_error_bit2_secondary="Wrong size of boolean data received for Secondary RG."
  rg_status_error_mismatch_secondary="The Secondary RG's Status is not matching with its Safety Switches' state."
  rg_status_error_s1_pushed_secondary="The S1 Safety Switch has been pushed on Secondary RG."
  rg_status_error_s1_triggered_secondary="The S1 Safety Switch has been triggered on Secondary RG.<br>Please restart the Secondary RG gripper."
  rg_status_error_s2_pushed_secondary="The S2 Safety Switch has been pushed on Secondary RG."
  rg_status_error_s2_triggered_secondary="The S2 Safety Switch has been triggered on Secondary RG.<br>Please restart the Secondary RG gripper."
  rg_status_error_safety_system_secondary="The Safety System error.<br>Please restart the Secondary RG gripper."
  
  #======    End of OnRobot RG Engine Messages    ======#
  #======    OnRobot RG Engine    ======#
  
  rg_dataProcess_running=False
  rg_start_flange=ON_ZEROPOSE
  rg_start_pose=ON_ZEROPOSE
  RG_STATUS_IGNORE_SHIFT=4
  def rg_status_int_get(tool_index):
  local status_int=binary_list_to_integer([rg_S1_pushed_arr[tool_index],rg_S1_triggered_arr[tool_index],rg_S2_pushed_arr[tool_index],rg_S2_triggered_arr[tool_index],rg_Safety_error_arr[tool_index]])
  return status_int
  end 
  def rg_dataProcess_status_errors(rg_stop=False):
  enter_critical
  local tool_index=rg_index
  if(tool_index==ON_DI_DUAL):
  tool_index=ON_DI_SECONDARY
  rg_stop=on_error((rg_device_id_arr[tool_index]!=tool_index),rg_status_error_missing,rg_status_error_title,rg_stop)
  rg_stop=on_error((rg_product_code_arr[tool_index]==ON_DEVICE_ID_MISSING),rg_status_error_missing,rg_status_error_title,rg_stop)
  tool_index=ON_DI_PRIMARY
  end 
  rg_stop=on_error((rg_device_id_arr[tool_index]!=tool_index),rg_status_error_missing,rg_status_error_title,rg_stop)
  rg_stop=on_error((rg_product_code_arr[tool_index]==ON_DEVICE_ID_MISSING),rg_status_error_missing,rg_status_error_title,rg_stop)
  
  local switch_error_single=rg_status_int_get(tool_index)
  local status_error_single=floor(rg_Status_arr[tool_index]/RG_STATUS_IGNORE_SHIFT)
  if(status_error_single!=switch_error_single):
  on_warning(((status_error_single-switch_error_single)>0),str_cat(rg_else_error,rg_Status_arr[tool_index]),rg_status_error_title)
  end 
  if(switch_error_single!=0):
  rg_stop=on_error(rg_S1_pushed_arr[tool_index],rg_status_error_s1_pushed_single,rg_status_error_title,rg_stop)
  rg_stop=on_error(rg_S1_triggered_arr[tool_index],rg_status_error_s1_triggered_single,rg_status_error_title,rg_stop)
  rg_stop=on_error(rg_S2_pushed_arr[tool_index],rg_status_error_s2_pushed_single,rg_status_error_title,rg_stop)
  rg_stop=on_error(rg_S2_triggered_arr[tool_index],rg_status_error_s2_triggered_single,rg_status_error_title,rg_stop)
  rg_stop=on_error(rg_Safety_error_arr[tool_index],rg_status_error_safety_system_single,rg_status_error_title,rg_stop)
  end 
  
  exit_critical
  return rg_stop
  end 
  def rg_dataProcess():
  enter_critical
  local tool_index=rg_index
  if tool_index==ON_DI_DUAL:
  rg_Width_primary=rg_Width_arr[ON_DI_PRIMARY]
  rg_Depth_primary=rg_Depth_arr[ON_DI_PRIMARY]
  rg_DepthRel_primary=rg_DepthRel_arr[ON_DI_PRIMARY]
  rg_Busy_primary=rg_Busy_arr[ON_DI_PRIMARY]
  rg_Grip_detected_primary=rg_Grip_detected_arr[ON_DI_PRIMARY]
  rg_Width_secondary=rg_Width_arr[ON_DI_SECONDARY]
  rg_Depth_secondary=rg_Depth_arr[ON_DI_SECONDARY]
  rg_DepthRel_secondary=rg_DepthRel_arr[ON_DI_SECONDARY]
  rg_Busy_secondary=rg_Busy_arr[ON_DI_SECONDARY]
  rg_Grip_detected_secondary=rg_Grip_detected_arr[ON_DI_SECONDARY]
  else:
  rg_Width=rg_Width_arr[tool_index]
  rg_Depth=rg_Depth_arr[tool_index]
  rg_DepthRel=rg_DepthRel_arr[tool_index]
  rg_Busy=rg_Busy_arr[tool_index]
  rg_Grip_detected=rg_Grip_detected_arr[tool_index]
  end 
  exit_critical
  end 
  thread rg_dataProcess_thread():
  if ON_DEBUG_LOG:
  textmsg("Starting rg_dataProcess thread")
  end 
  while rg_dataProcess_running:
  sync()
  local rg_stop=False
  rg_stop=rg_dataProcess_status_errors(rg_stop)
  if rg_stop:
  halt
  end 
  rg_dataProcess()
  end 
  if ON_DEBUG_LOG:
  textmsg("Stopping rg_dataProcess thread")
  end 
  end 
  def rg_index_get():
  return rg_index
  end 
  
  #======    End of OnRobot RG Engine    ======#
  rg_mounting_angle_arr[0] = 0.0
  rg_fingertip_arr[0] = 4.599999904632568
  rg_Depth_arr[0] = 5.249355316162109
  textmsg(on_devices_primary_log, ": Quick Changer for I/O + RG2 + [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]")
  on_install_tcp = False
  on_follow_tcp = False
  on_tcp_active_is_primary = True
  on_tcp_vision_primary = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  on_cog_vision_primary = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  on_mass_vision_primary = 0.0
  on_tcp_qc_primary = p[0.0, 0.0, 0.0196, 0.0, 0.0, 0.0]
  on_cog_qc_primary = p[0.0, 0.0, 0.007, 0.0, 0.0, 0.0]
  on_mass_qc_primary = 0.093
  on_tcp_gripper_static_primary = rg_mount_tcp(rg_mounting_angle_arr[0])
  on_cog_gripper_primary = rg_mount_cog(rg_mounting_angle_arr[0])
  on_mass_gripper_primary = 0.78
  on_tcp_tool_primary = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  on_cog_tool_primary = p[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
  on_mass_tool_primary = 0.0
  
  #======    End of OnRobot RG Depth    ======#
  #======    OnRobot RG Width Messages    ======#
  
  rg_grip_title="OnRobot - RG Grip"
  rg_grip_return_error_n1="RG Grip command returned with error.<br>Please be sure that the required width is between the limits.<br>Program halted."
  
  #======    End of OnRobot RG Width Messages    ======#
  #======    OnRobot RG Width    ======#
  
  RG_MIN_WIDTH=0
  RG_MAX_WIDTH_RG2=110
  RG_MAX_WIDTH_RG6=160
  RG_MIN_FORCE=0
  RG_MAX_FORCE_RG2=40
  RG_MAX_FORCE_RG6=120
  rg__grip_param_warning_width="The parameter 'width' is out of the limits. Limited value sent: "
  rg__grip_param_warning_force="The parameter 'force' is out of the limits. Limited value sent: "
  def rg_depth_compensate(tool_index,start_depth_mm):
  local timeout=0
  while not rg_Busy_arr[tool_index]:
  sleep(0.008)
  timeout=timeout+1
  if timeout>20:
  break
  end
  end
  local start_pose=get_forward_kin()
  if(tool_index==ON_DI_SECONDARY):
  local tcp_static=on_tcp_static_secondary
  else:
  local tcp_static=on_tcp_static_primary
  end 
  local t_w_rg=pose_trans(get_actual_tool_flange_pose(),tcp_static)
  local t_rg_w=pose_inv(t_w_rg)
  local compensation_depth_mm=0
  local after_ready_continue_count=10
  while True:
  local busy=rg_Busy_arr[tool_index]
  if not busy:
  if after_ready_continue_count>0:
  after_ready_continue_count=after_ready_continue_count-1
  else:
  break
  end
  end
  local measure_depth_mm=rg_Depth_arr[tool_index]
  compensation_depth_mm=measure_depth_mm-start_depth_mm
  local target_pose=pose_add(start_pose,pose_trans(pose_trans(t_w_rg,p[0,0,compensation_depth_mm/1000.0,0,0,0]),t_rg_w))
  servoj(get_inverse_kin(target_pose),t=0.008,lookahead_time=0.033,gain=1500)
  end
  stopj(20)
  end
  def rg_grip(width,force,tool_index=0,blocking=True,depth_comp=False,popupmsg=True):
  if ON_DEBUG_LOG:
  textmsg("RG Grip start..")
  end 
  local retVal=0
  local limitOffset=(2.0*rg_fingertip_arr[tool_index])
  local width2send=width
  if limitOffset>0:
  local minWidth=RG_MIN_WIDTH
  else:
  local minWidth=RG_MIN_WIDTH-limitOffset
  end 
  if not(width2send>=minWidth):
  width2send=minWidth
  textmsg(rg__grip_param_warning_width,width2send)
  elif not(force>=RG_MIN_FORCE):
  force=RG_MIN_FORCE
  textmsg(rg__grip_param_warning_force,force)
  end 
  if(rg_product_code_arr[tool_index]==RG_DEVICE_ID_RG6):
  if not(width2send<=RG_MAX_WIDTH_RG6-limitOffset):
  width2send=RG_MAX_WIDTH_RG6-limitOffset
  textmsg(rg__grip_param_warning_width,width2send)
  elif not(force<=RG_MAX_FORCE_RG6):
  force=RG_MAX_FORCE_RG6
  textmsg(rg__grip_param_warning_force,force)
  end 
  else:
  if not(width2send<=RG_MAX_WIDTH_RG2-limitOffset):
  width2send=RG_MAX_WIDTH_RG2-limitOffset
  textmsg(rg__grip_param_warning_width,width2send)
  elif not((force<=RG_MAX_FORCE_RG2)):
  force=RG_MAX_FORCE_RG2
  textmsg(rg__grip_param_warning_force,force)
  end 
  end 
  rg_Grip_guard_arr[tool_index]=False
  sync()
  if(tool_index==ON_DI_SECONDARY):
  local isPrimary=False
  else:
  local isPrimary=True
  end 
  if(on_follow_tcp):
  on_tcp_set_actual_to(isPrimary)
  end 
  if depth_comp:
  local start_depth_mm=rg_Depth_arr[tool_index]
  end 
  sync()
  retVal=on_xmlrpc.rg_grip(tool_index,width2send+0.0,force+0.0)
  if(retVal!=0):
  popup(rg_grip_return_error_n1,rg_grip_title,error=True,blocking=False)
  halt
  end 
  if depth_comp:
  rg_depth_compensate(tool_index,start_depth_mm)
  end 
  if blocking:
  if not depth_comp:
  local timeout=0
  while not rg_Busy_arr[tool_index]:
  sleep(0.008)
  timeout=timeout+1
  if timeout>20:
  break
  end 
  end 
  end 
  while(rg_Busy_arr[tool_index]==True):
  sync()
  end 
  end 
  if(on_follow_tcp):
  on_tcp_update(isPrimary)
  end 
  if ON_DEBUG_LOG:
  textmsg("RG Grip ended.")
  end 
  return retVal
  end 
  
  #======    End of OnRobot RG Width    ======#
  #======    OnRobot VG Monitor Messages    ======#
  
  rg_monitor_error_title="OnRobot - RG Grip lost"
  rg_monitor_grip_lost_error="Grip lost detected.<br>Program halted."
  
  #======    End of OnRobot VG Monitor Messages    ======#
  #======    OnRobot RG Monitor    ======#
  
  thread rg_monitor_thread():
  while True:
  sync()
  local rg_error=False
  if(rg_index==ON_DI_DUAL):
  local tool_index=ON_DI_SECONDARY
  rg_error=rg_monitor_check(tool_index)
  local tool_index=ON_DI_PRIMARY
  else:
  local tool_index=rg_index
  end 
  rg_error=rg_error or rg_monitor_check(tool_index)
  if rg_error:
  halt
  end 
  end 
  end 
  def rg_monitor_check(tool_index=0):
  local error=False
  if rg_Grip_guard_arr[tool_index]and not rg_Grip_detected_arr[tool_index]:
  popup(rg_monitor_grip_lost_error,title=rg_monitor_error_title,error=True,blocking=False)
  rg_payload_set(0,tool_index=tool_index)
  error=True
  end 
  return error
  end 
  
  #======    End of OnRobot RG Monitor    ======#
  #======    OnRobot Run    ======#
  
  textmsg(on_xmlrpc_start_ip,on_device_ip)
  on_portopen_javaSocket()
  sync()
  on_rtde_feed_open()
  sync()
  on_set_rtde_watchdog(updateHz=0.2)
  sync()
  on_dataProcess_thrd=run on_dataProcess_thread()
  sync()
  on_tcp_init_primary()
  on_payload_init_primary()
  
  on_tcp_set_actual_to(on_tcp_active_is_primary)
  if(on_follow_tcp):
  on_payload_set_actual()
  end 
  on_watchdog_thrd=run on_set_watchdog_thread()
  sync()
  
  #======    End of OnRobot Run    ======#
  #======    OnRobot QC Start    ======#
  
  if(on_toolConnector):
  tc_setup_tool()
  end 
  sync()
  
  #======    End of OnRobot QC Start    ======#
  #======    OnRobot RG Run    ======#
  
  def rg_wait_for_init(tool_index):
  local rg_timeout=0
  while not((rg_product_code_arr[tool_index]==RG_DEVICE_ID_RG2)or(rg_product_code_arr[tool_index]==RG_DEVICE_ID_RG6)):
  sync()
  rg_timeout=rg_timeout+1
  if(rg_timeout>ON_INIT_TIMEOUT):
  popup(rg_device_id_timeout,rg_error_title,error=True,blocking=False)
  halt
  end 
  end 
  if ON_DEBUG_LOG:
  textmsg("Identified RG: ",rg_product_code_arr[tool_index])
  end 
  end 
  rg_dataRead_running=True
  sync()
  rg_dataRead_thrd=run rg_dataRead_thread()
  sync()
  textmsg(rg_device_id_waiting)
  if(rg_index==ON_DI_DUAL):
  rg_wait_for_init(ON_DI_PRIMARY)
  rg_wait_for_init(ON_DI_SECONDARY)
  else:
  rg_wait_for_init(rg_index)
  end 
  sync()
  rg_dataProcess_running=True
  sync()
  rg_dataProcess_thrd=run rg_dataProcess_thread()
  sync()
  rg_monitor_thread_handle=run rg_monitor_thread()
  sync()
  
  #======    End of OnRobot RG Run    ======#
  # end: URCap Installation Node
  def vopsirecubfinal():
    $ 111 "vopsirecubfinal" "noBreak"
    $ 112 "MoveJ"
    $ 113 "intermediar_pix" "breakAfter"
    movej(get_inverse_kin(p[-.170070894093, -.286314742325, .205284094588, 1.290970210430, 2.847972923461, -.014634565969], qnear=[0.6869624853134155, -1.991920296345846, 1.878627896308899, -1.4594176451312464, -1.553516689931051, -0.03263694444765264]), a=1.3962634015954636, v=1.0471975511965976)
    $ 114 "MoveL"
    $ 115 "pix" "breakAfter"
    movel(p[-.170312889996, -.286653386088, .105284781077, 1.290970710237, 2.847972651041, -.014635116342], a=1.2, v=0.25)
    $ 116 "Wait: 0.5"
    sleep(0.5)
    # begin: URCap Program Node
    #   Source: OnRobot, 5.10.1, OnRobot A/S
    #   Type: RG Grip
    $ 117 "RG Grip"
on_return = rg_grip(10.0, 40.0, tool_index = 0, blocking = True, depth_comp = False, popupmsg = True)
rg_payload_set(mass = 0.0, tool_index = 0, use_guard = True)
    # end: URCap Program Node
    $ 118 "'G10'"
    # 'G10'
    $ 119 "MoveJ"
    $ 120 "intermediar_pix" "breakAfter"
    movej(get_inverse_kin(p[-.170070894093, -.286314742325, .205284094588, 1.290970210430, 2.847972923461, -.014634565969], qnear=[0.6869624853134155, -1.991920296345846, 1.878627896308899, -1.4594176451312464, -1.553516689931051, -0.03263694444765264]), a=1.3962634015954636, v=1.0471975511965976)
    $ 121 "MoveJ"
    $ 122 "intermediar_cub" "breakAfter"
    movej(get_inverse_kin(p[-.387105806421, -.061589431837, .315133654064, 1.283460785346, 2.861890250104, -.033958598298], qnear=[-0.1447361151324671, -1.793384853993551, 1.4621834754943848, -1.2407997290240687, -1.5486286322223108, -0.8723638693438929]), a=1.3962634015954636, v=1.0471975511965976)
    $ 123 "MoveL"
    $ 124 "cub_susstanga" "breakAfter"
    movel(p[-.387287329087, -.061843150974, .240134363941, 1.283460743464, 2.861890866283, -.033957206566], a=1.2, v=0.25)
    $ 125 "MoveL"
    $ 126 "cub_susdreapta" "breakAfter"
    movel(p[-.354105290994, -.099245691147, .240180700971, 1.283460744631, 2.861890743514, -.033956931246], a=1.2, v=0.25)
    $ 127 "MoveL"
    $ 128 "diagstangjos" "breakAfter"
    movel(p[-.424689640008, -.095024510088, .240337345770, 1.283461427412, 2.861890642160, -.033956677935], a=1.2, v=0.25)
    $ 129 "MoveL"
    $ 130 "cub_dreaptajos" "breakAfter"
    movel(p[-.391507648355, -.132427119614, .240383627661, 1.283461204092, 2.861890490189, -.033956554230], a=1.2, v=0.25)
    $ 131 "MoveJ"
    $ 132 "intermediar_cub" "breakAfter"
    movej(get_inverse_kin(p[-.387105806421, -.061589431837, .315133654064, 1.283460785346, 2.861890250104, -.033958598298], qnear=[-0.1447361151324671, -1.793384853993551, 1.4621834754943848, -1.2407997290240687, -1.5486286322223108, -0.8723638693438929]), a=1.3962634015954636, v=1.0471975511965976)
    $ 133 "MoveJ"
    $ 134 "interm_latdrcub" "breakAfter"
    movej(get_inverse_kin(p[-.340651038807, -.113953124990, .315198473493, 1.283460852774, 2.861889976695, -.033958611889], qnear=[-0.007118050252095998, -1.8722150961505335, 1.5181316137313843, -1.220947567616598, -1.5490034262286585, -0.7347129026996058]), a=1.3962634015954636, v=1.0471975511965976)
    $ 135 "MoveJ"
    $ 136 "interm_fata3" "breakAfter"
    movej(get_inverse_kin(p[-.311097158528, -.137966558084, .310288733464, -.139425311757, -2.585901951467, -.532315069936], qnear=[0.6397504806518555, -2.0257251898394983, 1.8231556415557861, -1.520031754170553, -2.194336716328756, -0.8723233381854456]), a=1.3962634015954636, v=1.0471975511965976)
    $ 137 "MoveL"
    $ 138 "fata3_sus" "breakAfter"
    movel(p[-.311330611420, -.138319926757, .210277602463, -.139420911450, -2.585954827027, -.532252046700], a=1.2, v=0.25)
    $ 139 "MoveL"
    $ 140 "fata3smin50y" "breakAfter"
    movel(p[-.348732989644, -.171501509405, .210480552877, -.139421125867, -2.585954927031, -.532251784033], a=1.2, v=0.25)
    $ 141 "MoveL"
    $ 142 "diag" "breakAfter"
    movel(p[-.311451606044, -.138489352840, .160278188017, -.139421154378, -2.585954830814, -.532251149619], a=1.2, v=0.25)
    $ 143 "MoveL"
    $ 144 "fata3josmin50y" "breakAfter"
    movel(p[-.348854080856, -.171670897411, .160481263299, -.139421017903, -2.585954503816, -.532251101134], a=1.2, v=0.25)
    $ 145 "MoveL"
    $ 146 "interm_fata3ext" "breakAfter"
    movel(p[-.298839081386, -.227436042629, .260549983324, -.139421087014, -2.585954252275, -.532251445078], a=1.2, v=0.25)
    $ 147 "MoveJ"
    $ 148 "intermediar_cub" "breakAfter"
    movej(get_inverse_kin(p[-.387105806421, -.061589431837, .315133654064, 1.283460785346, 2.861890250104, -.033958598298], qnear=[-0.1447361151324671, -1.793384853993551, 1.4621834754943848, -1.2407997290240687, -1.5486286322223108, -0.8723638693438929]), a=1.3962634015954636, v=1.0471975511965976)
    $ 149 "MoveJ"
    $ 150 "interm_fata2" "breakAfter"
    movej(get_inverse_kin(p[-.462133587590, .047249345003, .246922736378, 1.554066922654, 1.717674245201, -.429430945466], qnear=[-0.6218727270709437, -1.205414120350973, 1.1161530017852783, -0.6913674513446253, -1.1780121962176722, -0.8873565832721155]), a=1.3962634015954636, v=1.0471975511965976)
    $ 151 "MoveL"
    $ 152 "fata2_sus" "breakAfter"
    movel(p[-.429072578065, .009677427272, .196969464328, 1.554066632420, 1.717674207470, -.429430775805], a=1.2, v=0.25)
    $ 153 "MoveL"
    $ 154 "fata2susmin50y" "breakAfter"
    movel(p[-.466475012970, -.023504134946, .197172438129, 1.554066628457, 1.717674620803, -.429430680017], a=1.2, v=0.25)
    $ 155 "MoveL"
    $ 156 "diag2" "breakAfter"
    movel(p[-.429193571202, .009508094527, .146970002565, 1.554066557046, 1.717674910934, -.429430389785], a=1.2, v=0.25)
    $ 157 "MoveL"
    $ 158 "fata2josmin50y" "breakAfter"
    movel(p[-.466596007556, -.023673405884, .147172938628, 1.554066567883, 1.717674941427, -.429430555774], a=1.2, v=0.25)
    $ 159 "MoveJ"
    $ 160 "fata2_intermext" "breakAfter"
    movej(get_inverse_kin(p[-.482944962221, -.004633602279, .247149000379, 1.554066502680, 1.717675257717, -.429430817338], qnear=[-0.5317428747760218, -1.2134574095355433, 1.1317403316497803, -0.728006664906637, -1.1148789564715784, -0.816751782094137]), a=1.3962634015954636, v=1.0471975511965976)
    $ 161 "MoveJ"
    $ 162 "intermediar_cub" "breakAfter"
    movej(get_inverse_kin(p[-.387105806421, -.061589431837, .315133654064, 1.283460785346, 2.861890250104, -.033958598298], qnear=[-0.1447361151324671, -1.793384853993551, 1.4621834754943848, -1.2407997290240687, -1.5486286322223108, -0.8723638693438929]), a=1.3962634015954636, v=1.0471975511965976)
    $ 163 "MoveJ"
    $ 164 "intermediar_pix" "breakAfter"
    movej(get_inverse_kin(p[-.170070894093, -.286314742325, .205284094588, 1.290970210430, 2.847972923461, -.014634565969], qnear=[0.6869624853134155, -1.991920296345846, 1.878627896308899, -1.4594176451312464, -1.553516689931051, -0.03263694444765264]), a=1.3962634015954636, v=1.0471975511965976)
    $ 165 "MoveL"
    $ 166 "Waypoint_1" "breakAfter"
    movel(p[-.170325285053, -.286650973748, .108284344478, 1.291056234320, 2.848030337284, -.014792990191], a=1.2, v=0.25)
    $ 167 "Wait: 0.5"
    sleep(0.5)
    $ 168 "'G40'"
    # 'G40'
    # begin: URCap Program Node
    #   Source: OnRobot, 5.10.1, OnRobot A/S
    #   Type: RG Grip
    $ 169 "RG Grip"
on_return = rg_grip(40.0, 40.0, tool_index = 0, blocking = True, depth_comp = False, popupmsg = True)
rg_payload_set(mass = 0.0, tool_index = 0, use_guard = True)
    # end: URCap Program Node
    $ 170 "MoveL"
    $ 171 "intermediar_pix" "breakAfter"
    movel(p[-.170070894093, -.286314742325, .205284094588, 1.290970210430, 2.847972923461, -.014634565969], a=1.2, v=0.25)
  end
  while (True):
    $ 1 "Robot Program"
    $ 2 "MoveJ"
    $ 3 "proximitate_cub" "breakAfter"
    set_tcp(p[0.00116,-0.0017800000000000001,0.234,0.0,0.0,0.0])
    movej(get_inverse_kin(p[-.655657619564, .149781937359, .135001639922, 1.076095409739, 2.388610796852, 1.006493669121], qnear=[-0.13465482393373662, -0.5505560080157679, 0.29752886295318604, -0.7133148352252405, -2.1372297445880335, -0.6779091993915003]), a=1.3962634015954636, v=1.0471975511965976)
    $ 4 "MoveL"
    $ 5 "prindere_cub" "breakAfter"
    movel(p[-.602575879271, .198070117901, .065355548335, 1.076095361124, 2.388610928008, 1.006493864198], a=1.2, v=0.25)
    $ 6 "Wait: 0.5"
    sleep(0.5)
    $ 7 "'G40'"
    # 'G40'
    # begin: URCap Program Node
    #   Source: OnRobot, 5.10.1, OnRobot A/S
    #   Type: RG Grip
    $ 8 "RG Grip"
on_return = rg_grip(40.0, 40.0, tool_index = 0, blocking = True, depth_comp = False, popupmsg = True)
rg_payload_set(mass = 0.0, tool_index = 0, use_guard = True)
    # end: URCap Program Node
    $ 9 "MoveL"
    $ 10 "proximitate_cub" "breakAfter"
    movel(p[-.655657619564, .149781937359, .135001639922, 1.076095409739, 2.388610796852, 1.006493669121], a=1.2, v=0.25)
    $ 11 "MoveJ"
    $ 12 "punctinter_masa" "breakAfter"
    movej(get_inverse_kin(p[-.419875666887, -.042977009901, .215648810084, 2.943743867496, 1.048815850945, -.016342770058], qnear=[-0.1697457472430628, -1.761118237172262, 1.6964538097381592, -1.5071428457843226, -1.5512469450580042, 0.7165321707725525]), a=1.3962634015954636, v=1.0471975511965976)
    $ 13 "MoveJ"
    $ 14 "primul_cub" "breakAfter"
    movej(get_inverse_kin(p[-.420359819032, -.043654241043, .015650454501, 2.943743909554, 1.048815657058, -.016342668786], qnear=[-0.1679008642779749, -1.6568406263934534, 2.1357593536376953, -2.0507620016681116, -1.551248852406637, 0.7183775305747986]), a=1.3962634015954636, v=1.0471975511965976)
    $ 15 "Wait: 0.5"
    sleep(0.5)
    $ 16 "'G80'"
    # 'G80'
    # begin: URCap Program Node
    #   Source: OnRobot, 5.10.1, OnRobot A/S
    #   Type: RG Grip
    $ 17 "RG Grip"
on_return = rg_grip(80.0, 40.0, tool_index = 0, blocking = True, depth_comp = False, popupmsg = True)
rg_payload_set(mass = 0.0, tool_index = 0, use_guard = True)
    # end: URCap Program Node
    $ 18 "MoveJ"
    $ 19 "proximitate_cub" "breakAfter"
    movej(get_inverse_kin(p[-.655657619564, .149781937359, .135001639922, 1.076095409739, 2.388610796852, 1.006493669121], qnear=[-0.13465482393373662, -0.5505560080157679, 0.29752886295318604, -0.7133148352252405, -2.1372297445880335, -0.6779091993915003]), a=1.3962634015954636, v=1.0471975511965976)
    $ 20 "MoveL"
    $ 21 "prindere_cub" "breakAfter"
    movel(p[-.602575879271, .198070117901, .065355548335, 1.076095361124, 2.388610928008, 1.006493864198], a=1.2, v=0.25)
    $ 22 "Wait: 0.5"
    sleep(0.5)
    $ 23 "'G40'"
    # 'G40'
    # begin: URCap Program Node
    #   Source: OnRobot, 5.10.1, OnRobot A/S
    #   Type: RG Grip
    $ 24 "RG Grip"
on_return = rg_grip(40.0, 40.0, tool_index = 0, blocking = True, depth_comp = False, popupmsg = True)
rg_payload_set(mass = 0.0, tool_index = 0, use_guard = True)
    # end: URCap Program Node
    $ 25 "MoveJ"
    $ 26 "proximitate_cub" "breakAfter"
    movej(get_inverse_kin(p[-.655657619564, .149781937359, .135001639922, 1.076095409739, 2.388610796852, 1.006493669121], qnear=[-0.13465482393373662, -0.5505560080157679, 0.29752886295318604, -0.7133148352252405, -2.1372297445880335, -0.6779091993915003]), a=1.3962634015954636, v=1.0471975511965976)
    $ 27 "MoveL"
    $ 28 "prox_c2sus" "breakAfter"
    movel(p[-.380693802319, -.080379682556, .215695127801, 2.943743587849, 1.048815528891, -.016342981223], a=1.2, v=0.25)
    $ 29 "MoveL"
    $ 30 "cub2" "breakAfter"
    movel(p[-.381177969522, -.081056889729, .015696817877, 2.943743752574, 1.048815486214, -.016342888973], a=1.2, v=0.25)
    $ 31 "Wait: 0.5"
    sleep(0.5)
    $ 32 "'G80'"
    # 'G80'
    # begin: URCap Program Node
    #   Source: OnRobot, 5.10.1, OnRobot A/S
    #   Type: RG Grip
    $ 33 "RG Grip"
on_return = rg_grip(80.0, 40.0, tool_index = 0, blocking = True, depth_comp = False, popupmsg = True)
rg_payload_set(mass = 0.0, tool_index = 0, use_guard = True)
    # end: URCap Program Node
    $ 34 "MoveL"
    $ 35 "prox_cub2" "breakAfter"
    movel(p[-.380693802319, -.080379682556, .215695127801, 2.943743587849, 1.048815528891, -.016342981223], a=1.2, v=0.25)
    $ 36 "MoveJ"
    $ 37 "proximitate_cub" "breakAfter"
    movej(get_inverse_kin(p[-.655657619564, .149781937359, .135001639922, 1.076095409739, 2.388610796852, 1.006493669121], qnear=[-0.13465482393373662, -0.5505560080157679, 0.29752886295318604, -0.7133148352252405, -2.1372297445880335, -0.6779091993915003]), a=1.3962634015954636, v=1.0471975511965976)
    $ 38 "MoveL"
    $ 39 "prindere_cub" "breakAfter"
    movel(p[-.602575879271, .198070117901, .065355548335, 1.076095361124, 2.388610928008, 1.006493864198], a=1.2, v=0.25)
    $ 40 "Wait: 0.5"
    sleep(0.5)
    $ 41 "'G40'"
    # 'G40'
    # begin: URCap Program Node
    #   Source: OnRobot, 5.10.1, OnRobot A/S
    #   Type: RG Grip
    $ 42 "RG Grip"
on_return = rg_grip(40.0, 40.0, tool_index = 0, blocking = True, depth_comp = False, popupmsg = True)
rg_payload_set(mass = 0.0, tool_index = 0, use_guard = True)
    # end: URCap Program Node
    $ 43 "MoveJ"
    $ 44 "proximitate_cub" "breakAfter"
    movej(get_inverse_kin(p[-.655657619564, .149781937359, .135001639922, 1.076095409739, 2.388610796852, 1.006493669121], qnear=[-0.13465482393373662, -0.5505560080157679, 0.29752886295318604, -0.7133148352252405, -2.1372297445880335, -0.6779091993915003]), a=1.3962634015954636, v=1.0471975511965976)
    $ 45 "MoveJ"
    $ 46 "prox_cub3sus" "breakAfter"
    movej(get_inverse_kin(p[-.359675567176, -.125654898666, .215741436711, 2.943744014230, 1.048815977553, -.016342882108], qnear=[0.03492194414138794, -1.8647940794574183, 1.7738418579101562, -1.4848077932940882, -1.5518606344806116, 0.9212369322776794]), a=1.3962634015954636, v=1.0471975511965976)
    $ 47 "MoveL"
    $ 48 "cub3" "breakAfter"
    movel(p[-.358164533022, -.128508623163, .015708087768, 2.943854055187, 1.048635716309, -.016209503748], a=1.2, v=0.25)
    $ 49 "Wait: 0.5"
    sleep(0.5)
    $ 50 "'G80'"
    # 'G80'
    # begin: URCap Program Node
    #   Source: OnRobot, 5.10.1, OnRobot A/S
    #   Type: RG Grip
    $ 51 "RG Grip"
on_return = rg_grip(80.0, 40.0, tool_index = 0, blocking = True, depth_comp = False, popupmsg = True)
rg_payload_set(mass = 0.0, tool_index = 0, use_guard = True)
    # end: URCap Program Node
    $ 52 "MoveL"
    $ 53 "prox_cub3" "breakAfter"
    movel(p[-.359675559451, -.125654825186, .215741378659, 2.943743995295, 1.048815931859, -.016342709307], a=1.2, v=0.25)
    $ 54 "MoveJ"
    $ 55 "proximitate_cub" "breakAfter"
    movej(get_inverse_kin(p[-.655657619564, .149781937359, .135001639922, 1.076095409739, 2.388610796852, 1.006493669121], qnear=[-0.13465482393373662, -0.5505560080157679, 0.29752886295318604, -0.7133148352252405, -2.1372297445880335, -0.6779091993915003]), a=1.3962634015954636, v=1.0471975511965976)
    $ 56 "MoveL"
    $ 57 "prindere_cub" "breakAfter"
    movel(p[-.602575879271, .198070117901, .065355548335, 1.076095361124, 2.388610928008, 1.006493864198], a=1.2, v=0.25)
    $ 58 "Wait: 0.5"
    sleep(0.5)
    $ 59 "'G40'"
    # 'G40'
    # begin: URCap Program Node
    #   Source: OnRobot, 5.10.1, OnRobot A/S
    #   Type: RG Grip
    $ 60 "RG Grip"
on_return = rg_grip(40.0, 40.0, tool_index = 0, blocking = True, depth_comp = False, popupmsg = True)
rg_payload_set(mass = 0.0, tool_index = 0, use_guard = True)
    # end: URCap Program Node
    $ 61 "MoveL"
    $ 62 "proximitate_cub" "breakAfter"
    movel(p[-.655657619564, .149781937359, .135001639922, 1.076095409739, 2.388610796852, 1.006493669121], a=1.2, v=0.25)
    $ 63 "MoveJ"
    $ 64 "punctinter_masa" "breakAfter"
    movej(get_inverse_kin(p[-.419875666887, -.042977009901, .215648810084, 2.943743867496, 1.048815850945, -.016342770058], qnear=[-0.1697457472430628, -1.761118237172262, 1.6964538097381592, -1.5071428457843226, -1.5512469450580042, 0.7165321707725525]), a=1.3962634015954636, v=1.0471975511965976)
    $ 65 "MoveL"
    $ 66 "cub1_rand2" "breakAfter"
    movel(p[-.403647764018, -.062186244525, .065673361713, 2.943744017158, 1.048815946417, -.016342914852], a=1.2, v=0.25)
    $ 67 "Wait: 0.5"
    sleep(0.5)
    $ 68 "'G80'"
    # 'G80'
    # begin: URCap Program Node
    #   Source: OnRobot, 5.10.1, OnRobot A/S
    #   Type: RG Grip
    $ 69 "RG Grip"
on_return = rg_grip(80.0, 40.0, tool_index = 0, blocking = True, depth_comp = False, popupmsg = True)
rg_payload_set(mass = 0.0, tool_index = 0, use_guard = True)
    # end: URCap Program Node
    $ 70 "MoveL"
    $ 71 "ridicare_cub1r2" "breakAfter"
    movel(p[-.403284646829, -.061678298533, .215672106952, 2.943744130478, 1.048816241129, -.016342985713], a=1.2, v=0.25)
    $ 72 "MoveJ"
    $ 73 "proximitate_cub" "breakAfter"
    movej(get_inverse_kin(p[-.655657619564, .149781937359, .135001639922, 1.076095409739, 2.388610796852, 1.006493669121], qnear=[-0.13465482393373662, -0.5505560080157679, 0.29752886295318604, -0.7133148352252405, -2.1372297445880335, -0.6779091993915003]), a=1.3962634015954636, v=1.0471975511965976)
    $ 74 "MoveL"
    $ 75 "prindere_cub" "breakAfter"
    movel(p[-.602575879271, .198070117901, .065355548335, 1.076095361124, 2.388610928008, 1.006493864198], a=1.2, v=0.25)
    $ 76 "Wait: 0.5"
    sleep(0.5)
    $ 77 "'G40'"
    # 'G40'
    # begin: URCap Program Node
    #   Source: OnRobot, 5.10.1, OnRobot A/S
    #   Type: RG Grip
    $ 78 "RG Grip"
on_return = rg_grip(40.0, 40.0, tool_index = 0, blocking = True, depth_comp = False, popupmsg = True)
rg_payload_set(mass = 0.0, tool_index = 0, use_guard = True)
    # end: URCap Program Node
    $ 79 "MoveL"
    $ 80 "proximitate_cub" "breakAfter"
    movel(p[-.655657619564, .149781937359, .135001639922, 1.076095409739, 2.388610796852, 1.006493669121], a=1.2, v=0.25)
    $ 81 "MoveJ"
    $ 82 "punctinter_masa" "breakAfter"
    movej(get_inverse_kin(p[-.419875666887, -.042977009901, .215648810084, 2.943743867496, 1.048815850945, -.016342770058], qnear=[-0.1697457472430628, -1.761118237172262, 1.6964538097381592, -1.5071428457843226, -1.5512469450580042, 0.7165321707725525]), a=1.3962634015954636, v=1.0471975511965976)
    $ 83 "MoveL"
    $ 84 "prox_c2r2sus" "breakAfter"
    movel(p[-.374190232790, -.103473272452, .215718433508, 2.943743820130, 1.048815339161, -.016343216754], a=1.2, v=0.25)
    $ 85 "MoveL"
    $ 86 "cub2_r2" "breakAfter"
    movel(p[-.374553192523, -.103981153970, .065719496535, 2.943743936310, 1.048815483463, -.016342134852], a=1.2, v=0.25)
    $ 87 "Wait: 0.5"
    sleep(0.5)
    $ 88 "'G80'"
    # 'G80'
    # begin: URCap Program Node
    #   Source: OnRobot, 5.10.1, OnRobot A/S
    #   Type: RG Grip
    $ 89 "RG Grip"
on_return = rg_grip(80.0, 40.0, tool_index = 0, blocking = True, depth_comp = False, popupmsg = True)
rg_payload_set(mass = 0.0, tool_index = 0, use_guard = True)
    # end: URCap Program Node
    $ 90 "MoveL"
    $ 91 "prox_cub2r2" "breakAfter"
    movel(p[-.374190277057, -.103473448408, .215718314463, 2.943743543792, 1.048815729345, -.016342686240], a=1.2, v=0.25)
    $ 92 "MoveJ"
    $ 93 "proximitate_cub" "breakAfter"
    movej(get_inverse_kin(p[-.655657619564, .149781937359, .135001639922, 1.076095409739, 2.388610796852, 1.006493669121], qnear=[-0.13465482393373662, -0.5505560080157679, 0.29752886295318604, -0.7133148352252405, -2.1372297445880335, -0.6779091993915003]), a=1.3962634015954636, v=1.0471975511965976)
    $ 94 "MoveL"
    $ 95 "prindere_cub" "breakAfter"
    movel(p[-.602575879271, .198070117901, .065355548335, 1.076095361124, 2.388610928008, 1.006493864198], a=1.2, v=0.25)
    $ 96 "Wait: 0.5"
    sleep(0.5)
    $ 97 "'G40'"
    # 'G40'
    # begin: URCap Program Node
    #   Source: OnRobot, 5.10.1, OnRobot A/S
    #   Type: RG Grip
    $ 98 "RG Grip"
on_return = rg_grip(40.0, 40.0, tool_index = 0, blocking = True, depth_comp = False, popupmsg = True)
rg_payload_set(mass = 0.0, tool_index = 0, use_guard = True)
    # end: URCap Program Node
    $ 99 "MoveL"
    $ 100 "proximitate_cub" "breakAfter"
    movel(p[-.655657619564, .149781937359, .135001639922, 1.076095409739, 2.388610796852, 1.006493669121], a=1.2, v=0.25)
    $ 101 "MoveJ"
    $ 102 "punctinter_masa" "breakAfter"
    movej(get_inverse_kin(p[-.419875666887, -.042977009901, .215648810084, 2.943743867496, 1.048815850945, -.016342770058], qnear=[-0.1697457472430628, -1.761118237172262, 1.6964538097381592, -1.5071428457843226, -1.5512469450580042, 0.7165321707725525]), a=1.3962634015954636, v=1.0471975511965976)
    $ 103 "MoveL"
    $ 104 "cub1r3" "breakAfter"
    movel(p[-.391023233738, -.085110558777, .115696042313, 2.943743875720, 1.048815867387, -.016342869663], a=1.2, v=0.25)
    $ 105 "Wait: 0.5"
    sleep(0.5)
    $ 106 "'G80'"
    # 'G80'
    # begin: URCap Program Node
    #   Source: OnRobot, 5.10.1, OnRobot A/S
    #   Type: RG Grip
    $ 107 "RG Grip"
on_return = rg_grip(80.0, 40.0, tool_index = 0, blocking = True, depth_comp = False, popupmsg = True)
rg_payload_set(mass = 0.0, tool_index = 0, use_guard = True)
    # end: URCap Program Node
    $ 108 "MoveL"
    $ 109 "prox_c3r3s" "breakAfter"
    movel(p[-.390781263986, -.084771814342, .215695066677, 2.943744197747, 1.048815797686, -.016342666533], a=1.2, v=0.25)
    $ 110 "Call vopsirecubfinal"
    vopsirecubfinal()
  end
end
